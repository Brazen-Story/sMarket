// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id       String         @id @default(uuid())
  name          String
  phone_number  Int            @unique
  address       String
  email         String         @unique
  password      String
  biography     String?
  images        User_image[]
  products      Product[]
  bid           Bid[]
  likedProducts Product_liked[]
}

model User_image {
  image_id         String  @id @default(uuid())
  profile_image    String?
  background_image String?
  User             User    @relation(fields: [user_id], references: [user_id])
  user_id          String
}

model Product {
  product_id        String          @id @default(uuid())
  seller            User            @relation(fields: [seller_id], references: [user_id])
  seller_id         String
  title             String
  description       String
  registration_date DateTime        @default(now())
  end_date          DateTime
  start_price       Int
  reserve_price     Int?
  hammer_price      Int?
  status            Status          @default(auctionProgress)
  images            Product_image[]
  bid               Bid[]
  likes             Product_liked[]
}

model Product_image {
  image_id   String  @id @default(uuid())
  image_1    String
  image_2    String?
  image_3    String?
  product    Product @relation(fields: [product_id], references: [product_id], onDelete: Cascade)
  product_id String
}

model Product_liked {
  id         String   @id @default(uuid())
  product    Product  @relation(fields: [product_id], references: [product_id])
  product_id String
  user       User     @relation(fields: [user_id], references: [user_id])
  user_id    String
  liked_date DateTime @default(now())
}

//입찰내역?
model Bid {
  bid_id     String   @id @default(uuid())
  user       User     @relation(fields: [user_id], references: [user_id])
  user_id    String
  product    Product  @relation(fields: [product_id], references: [product_id])
  product_id String
  bidPrice   Int
  bidTime    DateTime @default(now())
}

enum Status {
  all
  auctionProgress
  auctionCompleted
}
